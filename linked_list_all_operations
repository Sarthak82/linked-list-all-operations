class Node:
    def __init__(self,data=None,next=None):
        self.data=data
        self.next=next

class linked_list:
    def __init__(self):
        self.head=None
        
    def inserttion_at_beg(self,data):
        node=Node(data,self.head)
        self.head=node
    def inserttion_at_end(self,data):
        if self.head==None:
            self.head=Node(data,None)
            return
        
        itr=self.head
        while itr.next:
            itr=itr.next
        itr.next=Node(data,None)
    
    def insert_values(self,list):
        self.head=None
        for i in list:
            self.inserttion_at_end(i)
            
    def get_length(self):
        if self.head==None:
            print('List is empty')
        count=0
        itr=self.head
        while itr:
            count+=1
            itr=itr.next
        return count
        
    def remove_at(self,index):
        if index<0 or index>=self.get_length():
            raise Exception('Invalid index')
        
        if index==0:
            self.head=self.head.next
        
        itr=self.head
        count=0
        while itr:
            if count==index-1:
                itr.next=itr.next.next
                break
            itr=itr.next
            count+=1
            
    def insertion_at(self,index,data):
        if index<0 or index>self.get_length():
            raise Exception('Invalid Index')
            
        if index==0:
            node=Node(data,self.head)
            self.head=node
            return
            
        itr=self.head
        count=0
        while itr:
            if count==index-1:
                node=Node(data,itr.next)
                itr.next=node
                break
            itr=itr.next
            count+=1
            
    def insert_after_value(self,prev_data,next_data):
        if self.head is None:
            return
        if self.head.data==prev_data:
            self.head.next=Node(next_data,self.head.next)
            return
        
        itr=self.head
        while itr:
            if itr.data==prev_data:
                node=Node(next_data,itr.next)
                itr.next=node
            itr=itr.next
    
    def remove_by_value(self,data1):
        if self.head is None:
            return
        if self.head.data==data1:
            self.head=self.head.next
            return
        itr=self.head
        while itr.next:
            if itr.next.data==data1:
                itr.next=itr.next.next
                break
            itr=itr.next
            
    def print(self):
        if self.head==None:
            print("List is empty")
            return
        
        itr=self.head
        llstr=" "
        
        while itr:
            llstr+=str(itr.data)+"-->"
            itr=itr.next
        print(llstr)
        
ll=linked_list()
ll.inserttion_at_beg(10)
ll.inserttion_at_beg(20)
ll.inserttion_at_end(200)
ll.inserttion_at_end(77)
ll.insert_values([22,55,6,88,22,44])
ll.print()
ll.remove_at(0)
ll.print()
ll.remove_at(3)
ll.print()
ll.insertion_at(2,33)
ll.print()
ll.insertion_at(2,88)
ll.print()
ll.insertion_at(0,1)
ll.print()
ll.get_length()
ll.insert_after_value(33,22)
ll.print()
ll.remove_by_value(33)
ll.print()
ll.remove_by_value(22)
ll.print()
